---

- name: Segundo Playbook amos a poir los objetos
  hosts: vm-azure
  vars_files:
    - variables_general.yaml
    - variables_acr.yaml

  remote_user: ansible
  vars:
    #   repositorio: terraformacruniracr1.azurecr.io
   kube_config: ~/.kube/config

  tasks:
   - name: Return the logged-in user for docker hub registry
     containers.podman.podman_login_info:
        registry: "{{acr_login_server}}"
     register: salida

   - name: Visualizar salida podman
     ansible.builtin.debug:
       msg: " ESTO ES \n {{salida}}"

   # https://stackoverflow.com/questions/60866755/ansible-k8s-module-failed-to-import-the-required-python-library-openshift-on
   # sudo apt install python3-pip -y en la VM de Azure
   - name: install pre-requisites
     pip:
      name:
      - openshift
      - pyyaml
      - kubernetes 
     become: yes


   - name: Create a k8s namespace
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       name: "{{namespace}}"
       api_version: v1
       kind: Namespace
       state: present

   - name: Login to ACR
     containers.podman.podman_login:
       username: "{{acr_username}}"
       password: "{{acr_password}}"
       registry: "{{acr_login_server}}"
     become: yes

# https://spacelift.io/blog/ansible-kubernetes#how-to-manage-kubernetes-resources-with-ansible
# https://spacelift.io/blog/ansible-kubernetes#how-to-manage-kubernetes-resources-with-ansible
   - name: Create a Deployment 4NGINX
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: apps/v1
         kind: Deployment
         metadata:
           name: nginx
           namespace: "{{namespace}}"
         spec:
           replicas: 1
           selector:
             matchLabels:
               app: app-nginx
           template:
             metadata:
               labels:
                 app: app-nginx
             spec:
               containers:
                 - name: nginx-aks
                   image:  "{{acr_login_server}}/{{apps[0].image}}_Z"
                   ports:
                     - containerPort: 80



   - name: Define PVC 4 REDIS
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       state: present
       definition:
         apiVersion: v1
         kind: PersistentVolumeClaim
         metadata:
           name: pvc-redis
           namespace: "{{namespace}}"
         spec:
           accessModes:
             - ReadWriteMany
           storageClassName: standard
           volumname: pv-redis
           resources:
             requests:
               storage: 1Gi

   - name: Define PV 4 REDIS
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       state: present
       definition:
         apiVersion: v1
         kind: PersistentVolume
         metadata:
           name: pv-redis
           namespace: "{{namespace}}"
         spec:
          storageClassName: standard
          capacity:
            storage: 1Gi
          persistentVolumeReclaimPolicy: Retain
          accessModes:
            - ReadWriteMany
          hostPath:
            path: "/tmp/volume/redix"



   - name: Create a Deployment REDIS
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: apps/v1
         kind: Deployment
         metadata:
           name: redis
           namespace: "{{namespace}}"
         spec:
           replicas: 1
           selector:
             matchLabels:
               app: app-redis
           template:
             metadata:
               labels:
                 app: app-redis
             spec:
               containers:
                 - name:   redis-aks
                   image:  "{{acr_login_server}}/{{apps[1].image}}_Z"
                   volumeMounts:
                    - mountPath: /data
                      name: data
               volumes:
                 - name: data
                   persistentVolumeClaim:
                     claimName: pvc-redis

                     #                   resources:
                     #requests:
                     #  cpu: "100M"
                     #  memory: "128Mi"
                     #limits:
                     #  cpu: "500M"
                     #  memory: "512Mi"
                   ports:
                     - containerPort: 6379
                       name: redis
                   env:
                     - name: ALLOW_EMPTY_PASSWORD
                       value: "yes"

   - name: Expose Deployment as a Service REDIS
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: v1
         kind: Service
         metadata:
           name: redis
           namespace: "{{namespace}}"
         spec:
           selector:
             app: app-redis
           ports:
             - protocol: TCP
               port: 6379

   - name: Create a Deployment VOTE
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: apps/v1
         kind: Deployment
         metadata:
           name: vote
           namespace: "{{namespace}}"
         spec:
           replicas: 1
           selector:
             matchLabels:
               app: app-vote
           template:
             metadata:
               labels:
                 app: app-vote
             spec:
               containers:
                 - name:   vote-aks
                   image:  "{{acr_login_server}}/{{apps[2].image}}_Z"
                     #                   resources:
                     #requests:
                     #  cpu: "100M"
                     #  memory: "128Mi"
                     #limits:
                     #  cpu: "500M"
                     #  memory: "512Mi"
                   ports:
                     - containerPort: 80
                   env:
                     - name: REDIS
                       value: "redis-service"

   # https://github.com/dockersamples/example-voting-app/tree/main/k8s-specifications
   - name: Expose Deployment as a Service VOTE
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: v1
         kind: Service
         metadata:
           name: vote-service
           namespace: "{{namespace}}"
         spec:
           type: LoadBalancer
           selector:
             app: app-vote
           ports:
             - protocol: TCP
               port: 80
               targetPort: 80
                   
   - name: Get an existing Service object vote-service
     kubernetes.core.k8s_info:
       api_version: v1
       kind: Service
       name: vote-service
       namespace: "{{namespace}}"
     register: web_service

   - name: Pinta variable registrada
     debug:
       msg: "SALIDA: {{web_service.resources[0].status.loadBalancer.ingress[0].ip}}"

   - name: Check that you can connect (GET) to a page and it returns a status 200
     ansible.builtin.uri:
       url: "http://{{web_service.resources[0].status.loadBalancer.ingress[0].ip}}"
       status_code: 200
       return_content: true
     register: this
     # Allow run in localhost inside Task
     run_once: true
     delegate_to: localhost

   - name: Visualizar salida CURL para vote
     ansible.builtin.debug:
       msg: "{{this.content}}"

# https://spacelift.io/blog/ansible-kubernetes#how-to-manage-kubernetes-resources-with-ansible
   - name: Expose Deployment as a Service 4NGINX
     kubernetes.core.k8s:
       kubeconfig: "{{kube_config}}"
       definition:
         apiVersion: v1
         kind: Service
         metadata:
           name: nginx-service
           namespace: "{{namespace}}"
         spec:
           selector:
             app: app-nginx
           ports:
             - protocol: TCP
               port: 80
               targetPort: 80
           type: LoadBalancer
